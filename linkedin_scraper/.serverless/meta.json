{
  "/Users/akashanand/Job_Scraper/linkedin_scraper/serverless.yml": {
    "versionFramework": "4.18.2",
    "servicePath": "/Users/akashanand/Job_Scraper/linkedin_scraper/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "linkedin-job-scraper",
      "plugins": [
        "serverless-python-requirements"
      ],
      "custom": {
        "pythonRequirements": {
          "pythonBin": "python3",
          "dockerizePip": true,
          "slim": true,
          "strip": false
        }
      },
      "provider": {
        "name": "aws",
        "runtime": "python3.9",
        "region": "us-east-1",
        "stage": "dev",
        "timeout": 600,
        "memorySize": 1024,
        "deploymentBucket": "linkedin-job-scraper-deployment-bucket",
        "environment": {
          "LINKEDIN_EMAIL": "api.authenticate.user@gmail.com",
          "LINKEDIN_PASSWORD": "<REDACTED>",
          "JOBS_BUCKET": "linkedin-job-scraper-dev-jobs"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject",
                  "s3:PutObject",
                  "s3:DeleteObject",
                  "s3:CreateBucket",
                  "s3:ListBucket",
                  "s3:GetBucketLocation"
                ],
                "Resource": [
                  "arn:aws:s3:::linkedin-job-scraper-dev-jobs/*",
                  "arn:aws:s3:::linkedin-job-scraper-dev-jobs"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "ssm:GetParameter",
                  "ssm:PutParameter",
                  "ssm:DeleteParameter"
                ],
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "events:DescribeRule",
                  "events:PutRule",
                  "events:DeleteRule",
                  "events:PutTargets",
                  "events:RemoveTargets",
                  "events:ListTargetsByRule"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "versionFunctions": true,
        "deploymentBucketObject": {
          "name": "linkedin-job-scraper-deployment-bucket",
          "serverSideEncryption": "AES256"
        },
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/linkedin-job-scraper-dev-api"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "linkedin-job-scraper",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/linkedin-job-scraper-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/linkedin-job-scraper-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:GetObject",
                            "s3:PutObject",
                            "s3:DeleteObject",
                            "s3:CreateBucket",
                            "s3:ListBucket",
                            "s3:GetBucketLocation"
                          ],
                          "Resource": [
                            "arn:aws:s3:::linkedin-job-scraper-dev-jobs/*",
                            "arn:aws:s3:::linkedin-job-scraper-dev-jobs"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "ssm:GetParameter",
                            "ssm:PutParameter",
                            "ssm:DeleteParameter"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "events:DescribeRule",
                            "events:PutRule",
                            "events:DeleteRule",
                            "events:PutTargets",
                            "events:RemoveTargets",
                            "events:ListTargetsByRule"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "linkedin-job-scraper",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "ApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "linkedin-job-scraper-deployment-bucket",
                  "S3Key": "serverless/linkedin-job-scraper/dev/1757640371485-2025-09-12T01:26:11.485Z/linkedin-job-scraper.zip"
                },
                "Handler": "lambda_handler.handler",
                "Runtime": "python3.9",
                "FunctionName": "linkedin-job-scraper-dev-api",
                "MemorySize": 1024,
                "Timeout": 600,
                "Environment": {
                  "Variables": {
                    "LINKEDIN_EMAIL": "api.authenticate.user@gmail.com",
                    "LINKEDIN_PASSWORD": "<REDACTED>",
                    "JOBS_BUCKET": "linkedin-job-scraper-dev-jobs"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ApiLogGroup"
              ]
            },
            "ApiLambdaVersionertIX6I7HhsEn1WhkYL9JmwyNWMxrClK7MEm8KNUtw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApiLambdaFunction"
                },
                "CodeSha256": "Qct/RGjGLGFqeHYqE9BmPvl9vCbYF4mIMH48apU3N+w="
              }
            },
            "ApiEventsRuleSchedule1": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "rate(1 hour)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Input": "{\"batch_number\":1,\"batch_size\":18}",
                    "Arn": {
                      "Fn::GetAtt": [
                        "ApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "apiSchedule"
                  }
                ]
              }
            },
            "ApiLambdaPermissionEventsRuleSchedule1": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "ApiEventsRuleSchedule1",
                    "Arn"
                  ]
                }
              }
            },
            "ApiEventsRuleSchedule2": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "rate(1 hour)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Input": "{\"batch_number\":2,\"batch_size\":18}",
                    "Arn": {
                      "Fn::GetAtt": [
                        "ApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "apiSchedule"
                  }
                ]
              }
            },
            "ApiLambdaPermissionEventsRuleSchedule2": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "ApiEventsRuleSchedule2",
                    "Arn"
                  ]
                }
              }
            },
            "ApiEventsRuleSchedule3": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "rate(1 hour)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Input": "{\"batch_number\":3,\"batch_size\":18}",
                    "Arn": {
                      "Fn::GetAtt": [
                        "ApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "apiSchedule"
                  }
                ]
              }
            },
            "ApiLambdaPermissionEventsRuleSchedule3": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "ApiEventsRuleSchedule3",
                    "Arn"
                  ]
                }
              }
            },
            "ApiEventsRuleSchedule4": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "rate(1 hour)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Input": "{\"batch_number\":4,\"batch_size\":18}",
                    "Arn": {
                      "Fn::GetAtt": [
                        "ApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "apiSchedule"
                  }
                ]
              }
            },
            "ApiLambdaPermissionEventsRuleSchedule4": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "ApiEventsRuleSchedule4",
                    "Arn"
                  ]
                }
              }
            },
            "ApiEventsRuleSchedule5": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "rate(1 hour)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Input": "{\"batch_number\":5,\"batch_size\":18}",
                    "Arn": {
                      "Fn::GetAtt": [
                        "ApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "apiSchedule"
                  }
                ]
              }
            },
            "ApiLambdaPermissionEventsRuleSchedule5": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "ApiEventsRuleSchedule5",
                    "Arn"
                  ]
                }
              }
            },
            "ApiEventsRuleSchedule6": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "rate(1 hour)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Input": "{\"batch_number\":6,\"batch_size\":18}",
                    "Arn": {
                      "Fn::GetAtt": [
                        "ApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "apiSchedule"
                  }
                ]
              }
            },
            "ApiLambdaPermissionEventsRuleSchedule6": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "ApiEventsRuleSchedule6",
                    "Arn"
                  ]
                }
              }
            },
            "ApiEventsRuleSchedule7": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "ScheduleExpression": "rate(1 hour)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Input": "{\"batch_number\":7,\"batch_size\":18}",
                    "Arn": {
                      "Fn::GetAtt": [
                        "ApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "apiSchedule"
                  }
                ]
              }
            },
            "ApiLambdaPermissionEventsRuleSchedule7": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "ApiEventsRuleSchedule7",
                    "Arn"
                  ]
                }
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-linkedin-job-scraper",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceProxyVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "{proxy+}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProxyVarAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProxyVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ApiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ApiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAny": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "ANY",
                "RequestParameters": {},
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ApiLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "ApiLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1757640348063": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodProxyVarOptions",
                "ApiGatewayMethodOptions",
                "ApiGatewayMethodProxyVarAny",
                "ApiGatewayMethodAny"
              ]
            },
            "ApiLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "JobScraperBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketName": "linkedin-job-scraper-dev-jobs",
                "PublicAccessBlockConfiguration": {
                  "BlockPublicAcls": true,
                  "BlockPublicPolicy": true,
                  "IgnorePublicAcls": true,
                  "RestrictPublicBuckets": true
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "linkedin-job-scraper-deployment-bucket",
              "Export": {
                "Name": "sls-linkedin-job-scraper-dev-ServerlessDeploymentBucketName"
              }
            },
            "ApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApiLambdaVersionertIX6I7HhsEn1WhkYL9JmwyNWMxrClK7MEm8KNUtw"
              },
              "Export": {
                "Name": "sls-linkedin-job-scraper-dev-ApiLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-linkedin-job-scraper-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "api": {
          "handler": "lambda_handler.handler",
          "timeout": 600,
          "events": [
            {
              "http": {
                "path": "{proxy+}",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "ANY"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "http": {
                "path": "",
                "method": "any",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "ANY"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            },
            {
              "schedule": {
                "rate": [
                  "rate(1 hour)"
                ],
                "input": {
                  "batch_number": 1,
                  "batch_size": 18
                }
              }
            },
            {
              "schedule": {
                "rate": [
                  "rate(1 hour)"
                ],
                "input": {
                  "batch_number": 2,
                  "batch_size": 18
                }
              }
            },
            {
              "schedule": {
                "rate": [
                  "rate(1 hour)"
                ],
                "input": {
                  "batch_number": 3,
                  "batch_size": 18
                }
              }
            },
            {
              "schedule": {
                "rate": [
                  "rate(1 hour)"
                ],
                "input": {
                  "batch_number": 4,
                  "batch_size": 18
                }
              }
            },
            {
              "schedule": {
                "rate": [
                  "rate(1 hour)"
                ],
                "input": {
                  "batch_number": 5,
                  "batch_size": 18
                }
              }
            },
            {
              "schedule": {
                "rate": [
                  "rate(1 hour)"
                ],
                "input": {
                  "batch_number": 6,
                  "batch_size": 18
                }
              }
            },
            {
              "schedule": {
                "rate": [
                  "rate(1 hour)"
                ],
                "input": {
                  "batch_number": 7,
                  "batch_size": 18
                }
              }
            }
          ],
          "name": "linkedin-job-scraper-dev-api",
          "package": {},
          "memory": 1024,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "ApiLambdaVersionertIX6I7HhsEn1WhkYL9JmwyNWMxrClK7MEm8KNUtw"
        }
      },
      "resources": {
        "Resources": {
          "JobScraperBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "linkedin-job-scraper-dev-jobs",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              }
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.9",
      "region": "us-east-1",
      "stage": "dev",
      "timeout": 600,
      "memorySize": 1024,
      "deploymentBucket": "linkedin-job-scraper-deployment-bucket",
      "environment": {
        "LINKEDIN_EMAIL": "api.authenticate.user@gmail.com",
        "LINKEDIN_PASSWORD": "<REDACTED>",
        "JOBS_BUCKET": "linkedin-job-scraper-dev-jobs"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:CreateBucket",
                "s3:ListBucket",
                "s3:GetBucketLocation"
              ],
              "Resource": [
                "arn:aws:s3:::linkedin-job-scraper-dev-jobs/*",
                "arn:aws:s3:::linkedin-job-scraper-dev-jobs"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:GetParameter",
                "ssm:PutParameter",
                "ssm:DeleteParameter"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:DescribeRule",
                "events:PutRule",
                "events:DeleteRule",
                "events:PutTargets",
                "events:RemoveTargets",
                "events:ListTargetsByRule"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "linkedin-job-scraper-deployment-bucket",
        "serverSideEncryption": "AES256"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/linkedin-job-scraper-dev-api"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "linkedin-job-scraper",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/linkedin-job-scraper-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/linkedin-job-scraper-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:PutObject",
                          "s3:DeleteObject",
                          "s3:CreateBucket",
                          "s3:ListBucket",
                          "s3:GetBucketLocation"
                        ],
                        "Resource": [
                          "arn:aws:s3:::linkedin-job-scraper-dev-jobs/*",
                          "arn:aws:s3:::linkedin-job-scraper-dev-jobs"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ssm:GetParameter",
                          "ssm:PutParameter",
                          "ssm:DeleteParameter"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "events:DescribeRule",
                          "events:PutRule",
                          "events:DeleteRule",
                          "events:PutTargets",
                          "events:RemoveTargets",
                          "events:ListTargetsByRule"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "linkedin-job-scraper",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "linkedin-job-scraper-deployment-bucket",
                "S3Key": "serverless/linkedin-job-scraper/dev/1757640371485-2025-09-12T01:26:11.485Z/linkedin-job-scraper.zip"
              },
              "Handler": "lambda_handler.handler",
              "Runtime": "python3.9",
              "FunctionName": "linkedin-job-scraper-dev-api",
              "MemorySize": 1024,
              "Timeout": 600,
              "Environment": {
                "Variables": {
                  "LINKEDIN_EMAIL": "api.authenticate.user@gmail.com",
                  "LINKEDIN_PASSWORD": "<REDACTED>",
                  "JOBS_BUCKET": "linkedin-job-scraper-dev-jobs"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "ApiLambdaVersionertIX6I7HhsEn1WhkYL9JmwyNWMxrClK7MEm8KNUtw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "Qct/RGjGLGFqeHYqE9BmPvl9vCbYF4mIMH48apU3N+w="
            }
          },
          "ApiEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(1 hour)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Input": "{\"batch_number\":1,\"batch_size\":18}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "ApiLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "apiSchedule"
                }
              ]
            }
          },
          "ApiLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ApiEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiEventsRuleSchedule2": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(1 hour)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Input": "{\"batch_number\":2,\"batch_size\":18}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "ApiLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "apiSchedule"
                }
              ]
            }
          },
          "ApiLambdaPermissionEventsRuleSchedule2": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ApiEventsRuleSchedule2",
                  "Arn"
                ]
              }
            }
          },
          "ApiEventsRuleSchedule3": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(1 hour)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Input": "{\"batch_number\":3,\"batch_size\":18}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "ApiLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "apiSchedule"
                }
              ]
            }
          },
          "ApiLambdaPermissionEventsRuleSchedule3": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ApiEventsRuleSchedule3",
                  "Arn"
                ]
              }
            }
          },
          "ApiEventsRuleSchedule4": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(1 hour)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Input": "{\"batch_number\":4,\"batch_size\":18}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "ApiLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "apiSchedule"
                }
              ]
            }
          },
          "ApiLambdaPermissionEventsRuleSchedule4": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ApiEventsRuleSchedule4",
                  "Arn"
                ]
              }
            }
          },
          "ApiEventsRuleSchedule5": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(1 hour)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Input": "{\"batch_number\":5,\"batch_size\":18}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "ApiLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "apiSchedule"
                }
              ]
            }
          },
          "ApiLambdaPermissionEventsRuleSchedule5": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ApiEventsRuleSchedule5",
                  "Arn"
                ]
              }
            }
          },
          "ApiEventsRuleSchedule6": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(1 hour)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Input": "{\"batch_number\":6,\"batch_size\":18}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "ApiLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "apiSchedule"
                }
              ]
            }
          },
          "ApiLambdaPermissionEventsRuleSchedule6": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ApiEventsRuleSchedule6",
                  "Arn"
                ]
              }
            }
          },
          "ApiEventsRuleSchedule7": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(1 hour)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Input": "{\"batch_number\":7,\"batch_size\":18}",
                  "Arn": {
                    "Fn::GetAtt": [
                      "ApiLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "apiSchedule"
                }
              ]
            }
          },
          "ApiLambdaPermissionEventsRuleSchedule7": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "ApiEventsRuleSchedule7",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-linkedin-job-scraper",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1757640348063": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodProxyVarOptions",
              "ApiGatewayMethodOptions",
              "ApiGatewayMethodProxyVarAny",
              "ApiGatewayMethodAny"
            ]
          },
          "ApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "JobScraperBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "linkedin-job-scraper-dev-jobs",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": true,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": true
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "linkedin-job-scraper-deployment-bucket",
            "Export": {
              "Name": "sls-linkedin-job-scraper-dev-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionertIX6I7HhsEn1WhkYL9JmwyNWMxrClK7MEm8KNUtw"
            },
            "Export": {
              "Name": "sls-linkedin-job-scraper-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-linkedin-job-scraper-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: linkedin-job-scraper\n\nplugins:\n  - serverless-python-requirements\n\ncustom:\n  pythonRequirements:\n    pythonBin: python3\n    dockerizePip: true\n    slim: true\n    strip: false\n\nprovider:\n  name: aws\n  runtime: python3.9\n  region: us-east-1\n  stage: dev\n  timeout: 600  # 10 minutes Lambda timeout (scheduled runs unaffected by API limits)\n  memorySize: 1024  # 1GB memory\n  deploymentBucket:\n    name: linkedin-job-scraper-deployment-bucket\n    serverSideEncryption: AES256\n  environment:\n    LINKEDIN_EMAIL: ${env:LINKEDIN_EMAIL}\n    LINKEDIN_PASSWORD: ${env:LINKEDIN_PASSWORD}\n    JOBS_BUCKET: ${self:service}-${self:provider.stage}-jobs\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - s3:GetObject\n            - s3:PutObject\n            - s3:DeleteObject\n            - s3:CreateBucket\n            - s3:ListBucket\n            - s3:GetBucketLocation\n          Resource: \n            - \"arn:aws:s3:::${self:service}-${self:provider.stage}-jobs/*\"\n            - \"arn:aws:s3:::${self:service}-${self:provider.stage}-jobs\"\n        - Effect: Allow\n          Action:\n            - logs:CreateLogGroup\n            - logs:CreateLogStream\n            - logs:PutLogEvents\n          Resource: \"*\"\n        - Effect: Allow\n          Action:\n            - ssm:GetParameter\n            - ssm:PutParameter\n            - ssm:DeleteParameter\n          Resource: \"*\"\n        - Effect: Allow\n          Action:\n            - events:DescribeRule\n            - events:PutRule\n            - events:DeleteRule\n            - events:PutTargets\n            - events:RemoveTargets\n            - events:ListTargetsByRule\n          Resource: \"*\"\n\nfunctions:\n  api:\n    handler: lambda_handler.handler\n    timeout: 600  # Keep Lambda at 10 minutes; API integration will cap during testing\n    events:\n      - http:  # REST API (supports >30s once quota is approved)\n          path: /{proxy+}\n          method: ANY\n          cors: true\n          integration: lambda-proxy\n      - http:  # REST API root\n          path: /\n          method: ANY\n          cors: true\n          integration: lambda-proxy\n      # Main scraping every hour (all 7 batches) - accumulates data\n      - schedule:\n          rate: rate(1 hour)\n          input:\n            batch_number: 1\n            batch_size: 18\n      - schedule:\n          rate: rate(1 hour)\n          input:\n            batch_number: 2\n            batch_size: 18\n      - schedule:\n          rate: rate(1 hour)\n          input:\n            batch_number: 3\n            batch_size: 18\n      - schedule:\n          rate: rate(1 hour)\n          input:\n            batch_number: 4\n            batch_size: 18\n      - schedule:\n          rate: rate(1 hour)\n          input:\n            batch_number: 5\n            batch_size: 18\n      - schedule:\n          rate: rate(1 hour)\n          input:\n            batch_number: 6\n            batch_size: 18\n      - schedule:\n          rate: rate(1 hour)\n          input:\n            batch_number: 7\n            batch_size: 18\n\nresources:\n  Resources:\n    JobScraperBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:service}-${self:provider.stage}-jobs\n        PublicAccessBlockConfiguration:\n          BlockPublicAcls: true\n          BlockPublicPolicy: true\n          IgnorePublicAcls: true\n          RestrictPublicBuckets: true",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "9e2ccff8-73d7-457b-8d55-623954de0272",
    "orgName": "akashapi",
    "userId": "SV9xc8cjv9tpDFyTnh",
    "userName": "akashapi",
    "serviceProviderAwsAccountId": "810774026207",
    "serviceProviderAwsCfStackName": "linkedin-job-scraper-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:810774026207:stack/linkedin-job-scraper-dev/3725c900-8eea-11f0-9a3d-0e5a5d8e6de1",
    "serviceProviderAwsCfStackCreated": "2025-09-11T08:35:04.852Z",
    "serviceProviderAwsCfStackUpdated": "2025-09-12T01:23:25.292Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:810774026207:function:linkedin-job-scraper-dev-api:20",
        "Description": "Current Lambda function version",
        "ExportName": "sls-linkedin-job-scraper-dev-ApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://yp00307yne.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-linkedin-job-scraper-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "linkedin-job-scraper-deployment-bucket",
        "ExportName": "sls-linkedin-job-scraper-dev-ServerlessDeploymentBucketName"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "ApiLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/linkedin-job-scraper-dev-api"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "linkedin-job-scraper",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/linkedin-job-scraper-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/linkedin-job-scraper-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:DeleteObject",
                        "s3:CreateBucket",
                        "s3:ListBucket",
                        "s3:GetBucketLocation"
                      ],
                      "Resource": [
                        "arn:aws:s3:::linkedin-job-scraper-dev-jobs/*",
                        "arn:aws:s3:::linkedin-job-scraper-dev-jobs"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ssm:GetParameter",
                        "ssm:PutParameter",
                        "ssm:DeleteParameter"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "events:DescribeRule",
                        "events:PutRule",
                        "events:DeleteRule",
                        "events:PutTargets",
                        "events:RemoveTargets",
                        "events:ListTargetsByRule"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "linkedin-job-scraper",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "ApiLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "linkedin-job-scraper-deployment-bucket",
              "S3Key": "serverless/linkedin-job-scraper/dev/1757640371485-2025-09-12T01:26:11.485Z/linkedin-job-scraper.zip"
            },
            "Handler": "lambda_handler.handler",
            "Runtime": "python3.9",
            "FunctionName": "linkedin-job-scraper-dev-api",
            "MemorySize": 1024,
            "Timeout": 600,
            "Environment": {
              "Variables": {
                "LINKEDIN_EMAIL": "api.authenticate.user@gmail.com",
                "LINKEDIN_PASSWORD": "<REDACTED>",
                "JOBS_BUCKET": "linkedin-job-scraper-dev-jobs"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ApiLogGroup"
          ]
        },
        "ApiLambdaVersionertIX6I7HhsEn1WhkYL9JmwyNWMxrClK7MEm8KNUtw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ApiLambdaFunction"
            },
            "CodeSha256": "Qct/RGjGLGFqeHYqE9BmPvl9vCbYF4mIMH48apU3N+w="
          }
        },
        "ApiEventsRuleSchedule1": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "rate(1 hour)",
            "State": "ENABLED",
            "Targets": [
              {
                "Input": "{\"batch_number\":1,\"batch_size\":18}",
                "Arn": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "apiSchedule"
              }
            ]
          }
        },
        "ApiLambdaPermissionEventsRuleSchedule1": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "ApiEventsRuleSchedule1",
                "Arn"
              ]
            }
          }
        },
        "ApiEventsRuleSchedule2": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "rate(1 hour)",
            "State": "ENABLED",
            "Targets": [
              {
                "Input": "{\"batch_number\":2,\"batch_size\":18}",
                "Arn": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "apiSchedule"
              }
            ]
          }
        },
        "ApiLambdaPermissionEventsRuleSchedule2": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "ApiEventsRuleSchedule2",
                "Arn"
              ]
            }
          }
        },
        "ApiEventsRuleSchedule3": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "rate(1 hour)",
            "State": "ENABLED",
            "Targets": [
              {
                "Input": "{\"batch_number\":3,\"batch_size\":18}",
                "Arn": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "apiSchedule"
              }
            ]
          }
        },
        "ApiLambdaPermissionEventsRuleSchedule3": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "ApiEventsRuleSchedule3",
                "Arn"
              ]
            }
          }
        },
        "ApiEventsRuleSchedule4": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "rate(1 hour)",
            "State": "ENABLED",
            "Targets": [
              {
                "Input": "{\"batch_number\":4,\"batch_size\":18}",
                "Arn": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "apiSchedule"
              }
            ]
          }
        },
        "ApiLambdaPermissionEventsRuleSchedule4": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "ApiEventsRuleSchedule4",
                "Arn"
              ]
            }
          }
        },
        "ApiEventsRuleSchedule5": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "rate(1 hour)",
            "State": "ENABLED",
            "Targets": [
              {
                "Input": "{\"batch_number\":5,\"batch_size\":18}",
                "Arn": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "apiSchedule"
              }
            ]
          }
        },
        "ApiLambdaPermissionEventsRuleSchedule5": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "ApiEventsRuleSchedule5",
                "Arn"
              ]
            }
          }
        },
        "ApiEventsRuleSchedule6": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "rate(1 hour)",
            "State": "ENABLED",
            "Targets": [
              {
                "Input": "{\"batch_number\":6,\"batch_size\":18}",
                "Arn": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "apiSchedule"
              }
            ]
          }
        },
        "ApiLambdaPermissionEventsRuleSchedule6": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "ApiEventsRuleSchedule6",
                "Arn"
              ]
            }
          }
        },
        "ApiEventsRuleSchedule7": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "rate(1 hour)",
            "State": "ENABLED",
            "Targets": [
              {
                "Input": "{\"batch_number\":7,\"batch_size\":18}",
                "Arn": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Id": "apiSchedule"
              }
            ]
          }
        },
        "ApiLambdaPermissionEventsRuleSchedule7": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "events.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "ApiEventsRuleSchedule7",
                "Arn"
              ]
            }
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-linkedin-job-scraper",
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": ""
          }
        },
        "ApiGatewayResourceProxyVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "{proxy+}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodProxyVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceProxyVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                  },
                  "ResponseTemplates": {
                    "application/json": ""
                  }
                }
              ]
            },
            "ResourceId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodProxyVarAny": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "ANY",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceProxyVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "ApiLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayMethodAny": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "ANY",
            "RequestParameters": {},
            "ResourceId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "NONE",
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "ApiLambdaPermissionApiGateway"
          ]
        },
        "ApiGatewayDeployment1757640348063": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodProxyVarOptions",
            "ApiGatewayMethodOptions",
            "ApiGatewayMethodProxyVarAny",
            "ApiGatewayMethodAny"
          ]
        },
        "ApiLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "JobScraperBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "linkedin-job-scraper-dev-jobs",
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": true,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": true
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "linkedin-job-scraper-deployment-bucket",
          "Export": {
            "Name": "sls-linkedin-job-scraper-dev-ServerlessDeploymentBucketName"
          }
        },
        "ApiLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ApiLambdaVersionertIX6I7HhsEn1WhkYL9JmwyNWMxrClK7MEm8KNUtw"
          },
          "Export": {
            "Name": "sls-linkedin-job-scraper-dev-ApiLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-linkedin-job-scraper-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}